Space Complexity:
==================
The amount of memory required for the input variables to process the logic/program is Space Complexity.

E.g: We are finind the the sum of all the elements of an integer

int SummArr(int arr[], int n)
{
	int sum = 0;
	for(int i=0;i<n;i++)
	{
		sum = sum + arr[i]
	}
	return sum;
}

Space Complexity : O(N)
Auxiliary Space Complexity : O(1)
Auxiliary Space Complexity : The extra amount of memory needed for a program to run not in terms of input variables.

Array 1 : 2,97,45,31,0,5
Array 2:  6,34,86,65,21,7,23,56,75,89
Merged Array : size will 12

Merged Array: we created extra 12 elements array
0,2,5,6,7,21,31,34,45,65,86,97

Three variables , sum, i, and n  + the size of the array.
Space Complexity : O(N)
Auxiliary Space Complexity : O(N)


Space Complexity for recursion:

write a program to count the number of elements in the sequence
int fun(int n)
{
	if(n<=0)
		return 0;
	return 1+ fun(n-1);
}
if n =5
======================================================================================================
Q:Find the number of digits in a given number
N = 395
ans = 3

N =10980383
ans = 8

N = 00001 = 1
ans = 1

#include<iostream>
#include<limits>
//Iterative Solution //Recursive Solutions
int NumOfDigits(long n)
{
	int counter = 0;
	while(n!=0) //395
	{
		n = n/10;//395/10 = 39/10=3/10=0
		++counter;//1//2//3
	}
	return counter;
}//O(log N)

//Recursive Solution
int RecursiveDigitCount(long N)//395//39//3
{
	if(n==0)
		return 0;
	return 1 + RecursiveDigitCount(N/10);//39//3//0
}//O(logN)//

For a program to have O(1) time complexity, we need to have constant processing in the logic
//(n*(n+1))/2

//Logarithmic Solution
int LogDigitCount(int N)//395
{
	return floor(log10(N) + 1); //2.xxxx + 1 = 3.xxxxx
	//floor(3.xxx) = 3
}//return 3

int main(int argc, char* argv[])
{
	int N = 0;
	cout<<endl<<"Enter the number:";cin>>N;
	int count = NumOfDigits(N);
	cout<<endl<<"Number of Digits = "<<count;
	return count;	
}

Arithmetic Progressions:
=========================
2,4,6,8,10,......
difference = 2
a =2

a, a+d, a+2d, a+3d,.....a+(n-1)d

Average  = sum / n

((first element + last element)/2) * N

((a + a+ (n-1)d)/2) * N

N/2 * (2a + (n-1)d)


Geometric Progressions:
=======================

2,4,8,16,32,.....
there is a constant ratio : 4/2 = 2; r= 2 (ratio)
a = 2

a, a.r, a.r^2, a.r^3..... a.r^(n-1)

Sum of the series of a Geometric Progression: (a * (1-r^n))/ (1-r) // r <1

Quadratic Equations:
=====================
ax^2 + bx + c = 0

a =1
b=1
c=1
x^2 + x  = -1

x = (-b + SQRT2(b^2 - (4*a*c))) / (2*a)

Discriminant (D = b^2 - 4*a*c)
D < 0, then it will have imaginary roots
if D = 0, it will have equal roots
uf D >0, it will have unequal roots

Mean:
======
Sum of all the observations divided by number of observations

Median:
=======
Middle value

1,4,7


Prime Numbers:
===============
Any number which is divisibile by 1 and itself only

2,3,5,7,11,13,17,19,.......

Fascinating property of Prime Numbers:
==========================================
Except for prime numbers 2 adn 3, all other prime numbers can be represented as 
(6*n +1)  or (6*n -1)

LCM:
====
Least Common Multiple
4:4,8,12,16,20,24.38,32,36......
6:6,12,18,24,30,36......

HCF:
====
Highest Common Factor 
12: 1,2,3,4,6,12
16: 1,2,4,8,16

Factorial:
==========
5! = 5 * 4 * 3 * 2 * 1
0! = 1

Permutations:
==============
Arrangement of r things out of a total of n things is the number of permutations; n

=====================================================================================================
#include <limits.h>
using namespace std;

bool isPal(int n)
{
	int rev = 0;

	int temp = n;
	while(temp != 0)//4553//455/45//4
	{
		int ld = temp % 10;//ld=3//455 % 10 = ld =5// 45 % 10 = ld = 5//4%10 = ld = 4

		rev = rev * 10 + ld; //rev=3;//35//355//3550 + 4 = 3554

		temp = temp / 10;//temp=455;//455/10 = 45//45/10 = 4// 4/10 = temp = 0
	}	

	return rev==n;// 3554 == 4553
}
int main() {
    
    	int number = 4553;
    	
    	cout<<(bool)isPal(number);
    	
    	return 0;
}

